spec:
  templates:

  # Generate random parameters for an ansatz
  - name: generate-random-ansatz-params
    parent: generic-task
    inputs:
      parameters:
      - name: min-val
        default: -0.01
      - name: max-val
        default: 0.01
      - name: n-layers
        default: 1
      - name: include-non-layered-params
        default: 'True'
      - name: layer-index
        default: 0
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: ansatz
        path: /app/ansatz.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.circuit import generate_random_ansatz_params, load_circuit_template, save_circuit_template_params
            ansatz = load_circuit_template('ansatz.json')
            params = generate_random_ansatz_params(ansatz,
                                                   min_val={{inputs.parameters.min-val}},
                                                   max_val={{inputs.parameters.max-val}},
                                                   n_layers={{inputs.parameters.n-layers}},
                                                   include_non_layered_params={{inputs.parameters.include-non-layered-params}},
                                                   layer_index={{inputs.parameters.layer-index}})
            save_circuit_template_params(params, 'params.json')
    outputs:
      artifacts:
      - name: params
        path: /app/params.json

  # Combine ansatz parameter
  - name: combine-ansatz-params
    parent: generic-task
    inputs:
      parameters:
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: params1
        path: /app/params1.json
      - name: params2
        path: /app/params2.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.circuit import combine_ansatz_params, load_circuit_template_params, save_circuit_template_params
            params1 = load_circuit_template_params('params1.json')
            params2 = load_circuit_template_params('params2.json')
            combined_params = combine_ansatz_params(params1, params2)
            save_circuit_template_params(combined_params, 'combined_params.json')
    outputs:
      artifacts:
      - name: combined-params
        path: /app/combined_params.json

  # Build circuit for ansatz
  - name: build-ansatz-circuit
    parent: generic-task
    inputs:
      parameters:
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: ansatz
        path: /app/ansatz.json
      - name: params
        path: /app/params.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.circuit import (build_ansatz_circuit,
                                               load_circuit_template,
                                               load_circuit_template_params,
                                               save_circuit)
            ansatz = load_circuit_template('ansatz.json');
            params = load_circuit_template_params('params.json');
            circuit = build_ansatz_circuit(ansatz, params);
            save_circuit(circuit, 'circuit.json')
    outputs:
      artifacts:
      - name: circuit
        path: /app/circuit.json

  # Build uniform parameter grid
  - name: build-uniform-parameter-grid
    parent: generic-task
    inputs:
      parameters:
      - name: n-layers
        default: 1
      - name: min-value
      - name: max-value
      - name: step
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: ansatz
        path: /app/ansatz.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.circuit import (save_parameter_grid,
                                               load_circuit_template,
                                               build_uniform_param_grid)
            ansatz = load_circuit_template('ansatz.json')
            grid = build_uniform_param_grid(ansatz,
                                                {{inputs.parameters.n-layers}},
                                                {{inputs.parameters.min-value}},
                                                {{inputs.parameters.max-value}},
                                                {{inputs.parameters.step}})
            save_parameter_grid(grid, 'parameter_grid.json')
    outputs:
      artifacts:
      - name: parameter-grid
        path: /app/parameter_grid.json

  # Build uniform parameter grid with custom min, max, step per parameter (or by layer) 
  - name: build-custom-uniform-parameter-grid
    parent: generic-task
    inputs:
      parameters:
      - name: n-layers
        default: 1
      - name: list-min-value
      - name: list-max-value
      - name: list-step
      - name: per-parameter
        default: 'True'
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: ansatz
        path: /app/ansatz.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.circuit import (save_parameter_grid,
                                               load_circuit_template,
                                               build_custom_uniform_param_grid)
            ansatz = load_circuit_template('ansatz.json')
            grid = build_custom_uniform_param_grid(ansatz,
                                                {{inputs.parameters.n-layers}},
                                                {{inputs.parameters.list-min-value}},
                                                {{inputs.parameters.list-max-value}},
                                                {{inputs.parameters.list-step}},
                                                {{inputs.parameters.per-parameter}})
            save_parameter_grid(grid, 'parameter_grid.json')
    outputs:
      artifacts:
      - name: parameter-grid
        path: /app/parameter_grid.json


  - name: build-circuit-layers-and-connectivity
    parent: generic-task
    inputs:
      parameters:
      - name: x-dimension
      - name: y-dimension
        default: 'None'
      - name: layer-type
        default: 'nearest-neighbor'
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.circuit import (save_circuit_layers,
                                               save_circuit_connectivity,
                                               build_circuit_layers_and_connectivity)
            connectivity, layers = build_circuit_layers_and_connectivity(
                                                {{inputs.parameters.x-dimension}},
                                                {{inputs.parameters.y-dimension}},
                                                '{{inputs.parameters.layer-type}}')
            save_circuit_layers(layers, 'circuit_layers.json')
            save_circuit_connectivity(connectivity, 'circuit_connectivity.json')
    outputs:
      artifacts:
      - name: circuit-layers
        path: /app/circuit_layers.json
      - name: circuit-connectivity
        path: /app/circuit_connectivity.json